Steps to create user and add to sudo in debian:
sudo su - root #be a root user
adduser <user_name>
..follow prompts..
#add to sudoers group
usermod -aG sudo <user_name>

#Verify user and sudoers from root
su - <user_name>
tail -1 /etc/passwd #Verify username is there
sudo su - root #should be root now
exit

#create a private/public key pair and upload public key to Digital ocean droplet
#From your laptop:
ssh-keygen -t rsa -b 4096 -C "<your id>" #Generate keys <your id> can be anything
#accept default (it will store in ~/.ssh/id_rsa and id_rsa.pub

#Now the difficult part:
#Normally the ssh via password may be disabled (you need to put your public ssh_key on the server)
#This is very difficult to do using the console. So enable password authentication, upload your ssh_key
#and then disable password authentication.
From account => open console
nano /etc/ssh/sshd_config
#uncomment #PasswordAuthentication yes 
#save (ctrl-shift-x and follow prompts)
#restart the ssh service
sudo service ssh restart

From your laptop you should be able to ssh in with password
1. If your laptop has ssh-copy-id, use that to upload the id_rsa.pub

2. check out ssh with key, by :
ssh <user>@<droplet_ip>
You should be logged in without having to use the password.

3. Remember to comment out PasswordAuthentication yes in /etc/ssh/sshd_config


Installing python 3:
#script
sudo apt-get update
sudo apt-get -y upgrade

#The OS is Debian, which does not have the latest python in the repo (to get via apt-get)
#So we have to use the tarball from this site (https://www.python.org/ftp/python/)
#script

export pyMajorVersion=3.6
export pyMinorVersion=6
export pyVersion=${pyMajorVersion}.${pyMinorVersion}
#prerequisites
sudo apt-get install build-essential checkinstall
sudo apt-get install libreadline-gplv2-dev  libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
#get tarball into /usr/src
cd /usr/src
sudo wget https://www.python.org/ftp/python/${pyVersion}/Python-${pyVersion}.tgz
sudo tar -xzvf Python-${pyVersion}.tgz
#compile
cd Python-${pyVersion}
sudo ./configure --enable-optimizations
sudo make altinstall #prevent replacing default /usr/bin/python

#check
python${pyMajorVersion} -V
pip${pyMajorVersion} -V

#This installs in /usr/local/bin
which python${pyMajorVersion}
which pip${pyMajorVersion}

#make this default
cd /usr/bin
sudo rm python #points to python2.7 normally
sudo ln -s /usr/local/bin/python${pyMajorVersion} /usr/bin/python
sudo ln -s /usr/local/bin/pip${pyMajorVersion} /usr/bin/pip

#install git,sox,nginx
sudo apt-get install git
sudo apt-get install sox #sound exchange
sudo apt-get install nginx
#nginx is installed in /usr/sbin
echo "use /usr/sbin/nginx to execute nginx.."

#configure nginx
#checkout or archive the git into ~/git, remove sites-enabled default and make it the sites-enabled as follows:
export userHome=`echo ~`
sudo rm /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/keaIvr
sudo ln -s ${userHome}/git/OpsProcedures/nginx/nginxKeacore.conf /etc/nginx/sites-enabled/keaIvr
#test the nginx
sudo nginx -s reload
curl localhost:80/status #Should show 'kea is up!'

#install ipython, sanic
sudo pip install ipython
sudo pip install sanic

#get stuff from the github repo (upload your public there to get it via git)
cd <your git directory: ~/git>

If you uploaded your key:
git clone git@github.com:arjunvasan/core.git
git clone git@github.com:arjunvasan/menus.git
git clone git@github.com:arjunvasan/kea.git
git clone git@github.com:arjunvasan/tts.git

or via https:

git clone https://github.com/arjunvasan/core.git
git clone https://github.com/arjunvasan/menus.git
git clone https://github.com/arjunvasan/kea.git
git clone https://github.com/arjunvasan/tts.git

or
git clone -b VV --single-branch https://github.com/arjunvasan/kea.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/menus.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/core.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/tts.git --depth 1

#install redis
cd /usr/src
sudo wget http://download.redis.io/redis-stable.tar.gz
sudo tar xvzf redis-stable.tar.gz
cd redis-stable
sudo make install

#Test redis and respond to its advice:
redis-server
#This starts the server and has advice like this:
26653:M 12 Oct 18:34:37.596 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
26653:M 12 Oct 18:34:37.596 # Server initialized
26653:M 12 Oct 18:34:37.596 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
26653:M 12 Oct 18:34:37.596 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled
#Remember to setup redis config (it runs on default config otherwise - very good info here: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04)
#Briefly
sudo mkdir -p /etc/redis
sudo cp /usr/src/redis-stable/redis.conf /etc/redis
sudo su - root
vi /etc/redis/redis.conf
-- Change 'supervised no' to 'supervised systemd' Note: Create the redis systemd Unit as below
-- Change 'dir ./' to '/var/lib/redis'
:wq #close the file
#create the systemd file (remain as root)
vi /etc/systemd/system/redis.service #like this:
cat /etc/systemd/system/redis.service
============ start of file ============
[Unit]
Description=Redis In-Memory Data Store
After=network.target

[Service]
User=redis
Group=redis
ExecStart=/usr/local/bin/redis-server /etc/redis/redis.conf
ExecStop=/usr/local/bin/redis-cli shutdown
Restart=always

[Install]
WantedBy=multi-user.target

==========end of file=========
#create the redis user and group (same name)
sudo adduser --system --group --no-create-home redis
#create the redis datadump directory (referred to earlier) and give permissions
sudo mkdir /var/lib/redis
sudo chown redis:redis /var/lib/redis
sudo chmod 770 /var/lib/redis

#test redist by start,status,stop
sudo systemctl start redis
sudo systemctl status redis #verify active
sudo systemctl stop redis
sudo systemctl status redis #verify inactive

#check using redis-cli (first start redis or make sure it is running)
redis-cli #automatically connects to 127.0.0.1:6379
ping #should get a PONG response.
set test "Redis is up"
get test #should get "Redis is up"
exit #exit to shell





#for default config setup the database saving area
sudo chmod o+r,o+w,o+x /usr/src/redis-stable

#enable Redis to start at Boot
sudo systemctl enable redis


#install python packages (all installed with sudo, so is available in all environments)
sudo install tornado
sudo pip install python-dateutil
sudo pip install arrow
sudo pip install redis
sudo pip3 install --upgrade google-cloud-speech
sudo pip3 install --upgrade google-cloud
sudo pip3 install --upgrade google-cloud-language

#not sure if the below are needed (may be needed in python2.7)ls
sudo pip3 install -t lib/ --upgrade google-api-python-client
sudo pip3 install -t lib/ --upgrade google-cloud
sudo pip3 install --upgrade google-cloud-texttospeech
sudo pip3 install --upgrade webrtcvad
sudo pip3 install --upgrade aioredis
sudo pip3 install jose #some package for signing!
sudp pip3 install crypto #not sure if this is needed
sudo pip3 install pycrypto
sudo pip3 install python-jose
##############bug #####################
##Note jose has a bug in print (2.7) and we are using 3. Fixed line
  File "/usr/local/lib/python3.6/site-packages/jose.py", line 546
    print decrypt(deserialize_compact(jwt), {'k':key},
##############end bug #################
##############outside setups ###############
In redis, the settings should be: query => false, playback => true

#copy google licenses/keys (were in /root/google)
cred.json
maps.key

#install google speech, nexmo
sudo pip3 install --upgrade google-api-python-client
sudo pip install nexmo

#install pyin


#Steps to create a branch:
1. In githup just put in a branch in the branch dropdown of the repo.
#check out the branch
git clone -b <branch> --single-branch <url> --depth <number of commits> #keep number of commits low (1 if you just want the latest)

#Steps to run the application
#redis setup
#Redis needs some keys and fields (hashed on the called to number):
#The following settings allow the order to proceed (otherwise circles around the menu)
***Old***
redis-cli #invoke the client
HSET kea.store-config:16502636176 query "false"
HSET kea.store-config:16502636176 playback "true"
HGETALL kea.store-config:16502636176
***New***
The coreGlobals populates the Redis with the store-config from etc/nexmoMenuMap.son
#Miscellaneous
#For storing recordings
mkdir -p  '/home/vv/audio/rx'

#Notes:
1. The code has to be organized into packages: main => core,kea,tts,menus. The globals should be moved into main
Before doing that here is the code to run the application:
cd ~/git
rm -rf core kea tts menus
git clone -b VV --single-branch https://github.com/arjunvasan/core.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/kea.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/tts.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/menus.git --depth 1
cd ~/git/core
export PYTHONPATH=~/git/core:~/git/menus:~/git/kea:~/git/tts:~/git
python app.py

########### systemd for keaivr (this app) ###########
1. create the /etc/systemd/system/keaivr.service as:
$ cat /etc/systemd/system/keaivr.service
[Unit]
Description=Kea Ivr sanic app
After=network.target

[Service]
User=vv
Group=vv
ExecStart=/home/vv/git/core/start.sh
Type=simple
Restart=always

[Install]
WantedBy=multi-user.target

2. create and make executable the script /home/vv/git/core/start.sh as:
$ cat /home/vv/git/core/start.sh
#!/usr/bin/env bash
cd ~/git/core
export PYTHONPATH=~/git/core:~/git/menus:~/git/kea:~/git/tts:~/git
python app.py

3. add user vv to the 'systemd-journal' to see journals without sudo:
sudo usermod -a -G systemd-journal vv

4. To see log of keaivr for last 1 hour:
$ journalctl -u keaivr --until "1 hour ago"
$ journalctl -u keaivr --since "1 hour ago" -p err
$ journalctl -u keaivr --since "1 hour ago" -p err
$ journalctl -u keaivr -n 100 --no-pager


5. To tail the log:
journalctl -f -u keaivr

########### end systemd for keaivr (this app) ###########

############## Merging Master changes to VV #############
Concept: checkout and merge locally and checkin VV
On your local (laptop):
mkdir -p ~/tempgit
cd ~/tempgit
rm -rf core kea tts menus
### loop for each of core kea tts menus
export repo=menus
cd ~/tempgit
git clone https://github.com/arjunvasan/${repo}.git
#will ask for usercode pwd
cd ${repo}
git checkout VV
git rebase master #This may result in conflicts..If conflict it switches to an intermediate branch and puts the conflict there
#Resolve any conflicts and continue rebase
git commit -a -m "master rebasing.." #It should say nothing to commit
git push #make sure you are in VV branch


git clone -b VV --single-branch https://github.com/arjunvasan/kea.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/tts.git --depth 1
git clone -b VV --single-branch https://github.com/arjunvasan/menus.git --depth 1
git checkout feature1
git rebase master
########### need to work on these ####################
/var/www/html/nxrx => kea.py
/var/www/html/tts/tts... =>tts.py (something seems to be recorded here)

